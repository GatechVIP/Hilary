/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var passport = require('passport');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var OAE = require('oae-util/lib/oae');
var PrincipalAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var User = require('oae-principals/lib/model').User;

var AuthenticationAPI = require('oae-authentication');
var AuthenticationUtil = require('oae-authentication/lib/util');

module.exports = function(app, callback) {
    // Attach the Authentication middleware to the global admin server.
    AuthenticationUtil.setupAuthMiddleware(app.server, OAE.serverTenant);

    // Setup the passport serializers.
    setupPassport();

    // Register the administator endpints.
    registerGlobalAdminAuthentication(app);

    ensureSchema(callback);
};

/**
 * Sets up the serialization methods for passport.
 * This should only be run onces.
 */
var setupPassport = function() {
    // This method will determine what goes into the cookie.
    // We only need the principalId in there.
    passport.serializeUser(function(user, done) {
        done(null, user.id);
    });

    // A user has a cookie with a principalId in it.
    // By returning the user (from the DB) to the done callback
    // it will be set on the request at request.user
    passport.deserializeUser(function(principalId, done) {
        var principal = AuthzUtil.getPrincipalFromId(principalId);
        var tenant = new Tenant(principal.tenantId);
        PrincipalAPI.getUser(new Context(tenant, new User(principal.tenantId, principalId)), principalId, function (err, user) {
            if (!err) {
                done(null, user);
            } else if (err && err.code === 404) {
                done(null, false);
            } else {
                done(err);
            }
        });
    });
};

/**
 * Register all the global tenant endpoints surrounding authentication
 *
 * @param  {Object} app The object that holds the global server.
 */
var registerGlobalAdminAuthentication = function(app) {
    var localStrategy = new AuthenticationAPI.LocalStrategyWrapper(OAE.serverTenant);
    passport.use(localStrategy);

    app.server.post('/api/auth/login', passport.authenticate(localStrategy.name), function(req, res) {
        // This callback only gets called when we log in succesfully.
        return res.send(200, req.user);
    });

    app.server.post('/api/auth/logout', function(req, res) {
        req.logOut();
        res.send(200, {'loggedout': 'true'});
    });
};


/**
 * Ensure that the all of the authentication-related schemas are created. If they already exist, this method will not do anything.
 *
 * @param  {Function}    callback       Invoked when the process completes
 * @param  {Object}      callback.err   Error object, containing the error message if any
 */
var ensureSchema = function(callback) {
    // Both user and group information will be stored inside of the Principals CF
    Cassandra.createColumnFamilies({
        'AuthenticationLoginId': "CREATE COLUMNFAMILY AuthenticationLoginId (loginId text PRIMARY KEY, userId text) WITH comment='Stores a Login ID that allows a user to authenticate in the system';",
        'AuthenticationUserLoginId': "CREATE COLUMNFAMILY AuthenticationUserLoginId (userId text PRIMARY KEY, loginId text) WITH comment='Maps user ids to their login ids';"
    }, callback);
};
